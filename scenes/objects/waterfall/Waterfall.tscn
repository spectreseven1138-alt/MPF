[gd_scene load_steps=19 format=2]

[ext_resource path="res://sprites/flat.png" type="Texture" id=1]
[ext_resource path="res://scenes/objects/waterfall/Waterfall.gd" type="Script" id=2]
[ext_resource path="res://sprites/objects/ice/ice.png" type="Texture" id=3]
[ext_resource path="res://scenes/objects/waterfall/IceBox.gd" type="Script" id=5]

[sub_resource type="Shader" id=1]
code = "/*
Shader from Godot Shaders - the free shader library.
godotshaders.com/shader/2d-waterfall

Feel free to improve and change this shader according to your needs
and consider sharing the modified result on godotshaders.com.
*/

shader_type canvas_item;

uniform vec2 scale; // Used for sprite script. Don't edit this value in the inspector.
uniform float zoom; // Used for sprite script. Don't edit this value in the inspector.

uniform sampler2D refraction_map;
uniform sampler2D water_mask;

uniform vec2 gap_stretch = vec2(0.8, 0.05);
uniform vec2 refraction_stretch = vec2(2.0, 0.8);
uniform float refraction_strength : hint_range(0.0, 0.1) = 0.02;

uniform vec4 water_tint : hint_color = vec4(0.2, 0.6, 1.0, 0.1);
uniform vec4 water_highlight : hint_color = vec4(1.0, 1.0, 1.0, 0.3);
uniform float speed = 1.0;
uniform float flow_gaps : hint_range(0.0, 1.0) = 0.33;
uniform float highlight_width : hint_range(0.0, 0.3) = 0.02;

void fragment()
{
	// Get the two noise textures and make them move on the y axis. The gaps move twice as fast as the refraction, but you can tweak this by changing (speed * 0.5)
	vec2 refraction_offset = texture(refraction_map, vec2(UV.x, UV.y + -TIME * speed * 0.5) * scale * refraction_stretch).xy;
	vec2 gap_mask = texture(water_mask, vec2(UV.x, UV.y + -TIME * speed) * scale * gap_stretch).xy;
	
	// Set values between -0.5 and 0.5 (instead of 0 and 1). Otherwise the reflection will move whith increased refraction_strength
	refraction_offset -= 0.5; 
	
	// Get the screen texture and distort it
	vec4 refraction = texture(SCREEN_TEXTURE, SCREEN_UV - refraction_offset * refraction_strength * zoom);
	
	
	// Create holes and apply colors and textures //
	
	vec4 color = vec4(1.0);
	
	// Define what values will be the water highlight color (the gap border)
	float inner_edge = flow_gaps + highlight_width;
	
	// See if the pixel is within the edges range and use the water colors alpha to blend between showing color or refraction texture.
	if (gap_mask.x < inner_edge)
	{
		color.rgb = mix(refraction.rgb, water_highlight.rgb, water_highlight.a);
	}
	else
	{
		color.rgb = mix(refraction.rgb, water_tint.rgb, water_tint.a);
	}
	
	// If the value is below the gap threshhold make it transparent (a gap)
	if (gap_mask.x < flow_gaps)
	{
		color.a = 0.0;
	}
	
	
	// Crate Edge Shape //
	
	// Set the shape for the top and bottom edges. Use water_mask as shape but with other values to flatten it out horizontally. 
	vec2 water_edge = texture(water_mask, vec2(UV.x, UV.y + -TIME * 0.1) * scale * vec2(0.15, 0.6)).xy;
	water_edge -= 0.5;
	
	// Use the same mask as for the gaps for left and right edge.
	vec2 vertical_edge_mask = gap_mask - 0.5;
	
	// Apply the new masks to the edges. This will make the wobble effect.
	color.a = mix(0.0, color.a, step(UV.x + vertical_edge_mask.x * 0.2, 0.92)); // Right edge
	color.a = mix(color.a, 0.0, step(UV.x - vertical_edge_mask.x * 0.2, 0.08)); // Left edge
	
	color.a = mix(0.0, color.a, step(UV.y + water_edge.y * 0.1, 0.95));  //Bottom edge
	color.a = mix(color.a, 0.0, step(UV.y - water_edge.y * 0.05, 0.05)); //Top edge
	
	COLOR = color;
}"

[sub_resource type="OpenSimplexNoise" id=2]

[sub_resource type="NoiseTexture" id=3]
seamless = true
noise = SubResource( 2 )

[sub_resource type="OpenSimplexNoise" id=4]

[sub_resource type="NoiseTexture" id=5]
seamless = true
noise = SubResource( 4 )

[sub_resource type="ShaderMaterial" id=6]
shader = SubResource( 1 )
shader_param/scale = Vector2( 0.786175, 1.96095 )
shader_param/zoom = 5.99323
shader_param/gap_stretch = Vector2( 0.8, 0.05 )
shader_param/refraction_stretch = Vector2( 2, 0.8 )
shader_param/refraction_strength = 0.02
shader_param/water_tint = Color( 0.2, 0.6, 1, 0.1 )
shader_param/water_highlight = Color( 1, 1, 1, 0.3 )
shader_param/speed = 0.6
shader_param/flow_gaps = 0.365
shader_param/highlight_width = 0.003
shader_param/refraction_map = SubResource( 3 )
shader_param/water_mask = SubResource( 5 )

[sub_resource type="RectangleShape2D" id=7]
extents = Vector2( 27, 29 )

[sub_resource type="Shader" id=8]
code = "shader_type canvas_item;
render_mode blend_mix,unshaded;

uniform vec4 color : hint_color = vec4(1.0, 1.0, 1.0, 1.0);

uniform float radius : hint_range(0.0, 1.0) = 0.0;
uniform vec2 size = vec2(1.0, 1.0);

void fragment() {
	vec4 texture_color = texture(TEXTURE, UV);
	COLOR = texture_color * color;
	
	vec2 size_ratio = vec2(max(1.0, size.x / size.y), max(1.0, size.y / size.x));
	float half_radius = 0.5 * radius;
	vec2 dist_max = half_radius / size_ratio;
	vec2 edge_pos = clamp(UV, dist_max, 1.0 - dist_max);
	float edge_dist = distance(UV * size_ratio, edge_pos * size_ratio);
	COLOR.a *= step(edge_dist, half_radius + 0.000001);
}
"

[sub_resource type="ShaderMaterial" id=9]
shader = SubResource( 8 )
shader_param/color = Color( 1, 1, 1, 1 )
shader_param/radius = 0.0
shader_param/size = Vector2( 100, 100 )

[sub_resource type="Shader" id=10]
code = "shader_type canvas_item;

uniform sampler2D dissolve_texture : hint_albedo;
uniform float dissolve_value : hint_range(0,1);

void fragment(){
    vec4 main_texture = texture(TEXTURE, UV);
    vec4 noise_texture = texture(dissolve_texture, UV);
    main_texture.a *= floor(dissolve_value + min(1, noise_texture.x));
    COLOR = main_texture;
}"

[sub_resource type="OpenSimplexNoise" id=11]

[sub_resource type="NoiseTexture" id=12]
seamless = true
noise = SubResource( 11 )

[sub_resource type="ShaderMaterial" id=13]
shader = SubResource( 10 )
shader_param/dissolve_value = 1.0
shader_param/dissolve_texture = SubResource( 12 )

[sub_resource type="RectangleShape2D" id=14]
extents = Vector2( 29, 4.48762 )

[node name="Waterfall" type="Sprite"]
material = SubResource( 6 )
position = Vector2( -99.5924, 129.876 )
scale = Vector2( 0.786175, 1.96095 )
texture = ExtResource( 1 )
script = ExtResource( 2 )

[node name="Area2D" type="Area2D" parent="."]
collision_layer = 524288
collision_mask = 15

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
visible = false
shape = SubResource( 7 )

[node name="IceBox" type="Control" parent="."]
visible = false
show_behind_parent = true
material = SubResource( 9 )
margin_left = -25.0
margin_top = 19.0
margin_right = 25.0
margin_bottom = 30.0
rect_clip_content = true
__meta__ = {
"_edit_use_anchors_": false
}

[node name="Ice" type="TextureRect" parent="IceBox"]
material = SubResource( 13 )
anchor_right = 1.0
anchor_bottom = 1.0
margin_right = 1907.0
margin_bottom = 77.0
rect_scale = Vector2( 0.254396, 0.101991 )
texture = ExtResource( 3 )
stretch_mode = 2
__meta__ = {
"_edit_use_anchors_": false
}

[node name="StaticBody2D" type="StaticBody2D" parent="IceBox"]
collision_layer = 524288
collision_mask = 15
script = ExtResource( 5 )

[node name="CollisionShape2D" type="CollisionShape2D" parent="IceBox/StaticBody2D"]
position = Vector2( 29, 4.48762 )
shape = SubResource( 14 )
disabled = true

[node name="Tween" type="Tween" parent="IceBox"]

[connection signal="body_entered" from="Area2D" to="." method="_on_Area2D_body_entered"]
