[gd_resource type="ShaderMaterial" load_steps=2 format=2]

[sub_resource type="Shader" id=1]
code = "shader_type canvas_item;

uniform float whitening_value;
uniform bool whitening_enabled;

uniform bool dissolve_enabled;
uniform float dissolve_progress : hint_range(0.0, 1.0);
uniform float dissolve_noise_desnity = 60;
uniform float dissolve_beam_size : hint_range(0.01, 0.15);
uniform vec4 dissolve_color : hint_color = vec4(0.0, 1.02, 1.2, 1.0);

vec2 random(vec2 uv){
    uv = vec2( dot(uv, vec2(127.1,311.7) ),
               dot(uv, vec2(269.5,183.3) ) );
    return -1.0 + 2.0 * fract(sin(uv) * 43758.5453123);
}

float noise(vec2 uv) {
    vec2 uv_index = floor(uv);
    vec2 uv_fract = fract(uv);

    vec2 blur = smoothstep(0.0, 1.0, uv_fract);

    return mix( mix( dot( random(uv_index + vec2(0.0,0.0) ), uv_fract - vec2(0.0,0.0) ),
                     dot( random(uv_index + vec2(1.0,0.0) ), uv_fract - vec2(1.0,0.0) ), blur.x),
                mix( dot( random(uv_index + vec2(0.0,1.0) ), uv_fract - vec2(0.0,1.0) ),
                     dot( random(uv_index + vec2(1.0,1.0) ), uv_fract - vec2(1.0,1.0) ), blur.x), blur.y) * 0.5 + 0.5;
}

void fragment() {
	if (dissolve_enabled){
		vec4 tex = texture(TEXTURE, UV);
		
		float noise = noise(UV * dissolve_noise_desnity) * UV.y;
		
		float d1 = step(dissolve_progress, noise);
		float d2 = step(dissolve_progress - dissolve_beam_size, noise);
		
		vec3 beam = vec3(d2 - d1) * dissolve_color.rgb;
		
		tex.rgb += beam;
		tex.a *= d2;
		
		COLOR = tex;
		
		if (whitening_enabled) {
//		    vec4 texture_color = texture(TEXTURE, UV);
		    COLOR = vec4(mix(tex.rgb, vec3(1,1,1), whitening_value), tex.a);
		}
	}
	else if (whitening_enabled) {
	    vec4 texture_color = texture(TEXTURE, UV);
	    COLOR = vec4(mix(texture_color.rgb, vec3(1,1,1), whitening_value), texture_color.a);
	}
	else {
		COLOR = texture(TEXTURE, UV)
	}
}
"

[resource]
shader = SubResource( 1 )
shader_param/whitening_value = 0.0
shader_param/whitening_enabled = false
shader_param/dissolve_enabled = false
shader_param/dissolve_progress = 0.0
shader_param/dissolve_noise_desnity = 60.0
shader_param/dissolve_beam_size = 0.01
shader_param/dissolve_color = Color( 1, 1, 1, 1 )
